diff --git a/js/entity_browser.iframe.js b/js/entity_browser.iframe.js
index b3e7e0a..064eb1d 100644
--- a/js/entity_browser.iframe.js
+++ b/js/entity_browser.iframe.js
@@ -32,6 +32,8 @@
     var uuid = $(this).attr('data-uuid');
     var original_path = $(this).attr('data-original-path');
     var iframeSettings = drupalSettings['entity_browser']['iframe'][uuid];
+    var autoAdjustHeight = (iframeSettings.height == 0);
+    var scrolling = (autoAdjustHeight) ? 'no' : 'auto';
     var iframe = $(
       '<iframe />',
       {
@@ -41,7 +43,8 @@
         'data-uuid': uuid,
         'data-original-path': original_path,
         'name': 'entity_browser_iframe_' + iframeSettings['entity_browser_id'],
-        'id': 'entity_browser_iframe_' + iframeSettings['entity_browser_id']
+        'id': 'entity_browser_iframe_' + iframeSettings['entity_browser_id'],
+        'scrolling': scrolling
       }
     );
 
@@ -53,8 +56,40 @@
       Drupal.entityBrowser.registerJsCallbacks(this, drupalSettings.entity_browser.iframe[uuid].js_callbacks, 'entities-selected');
     }
 
+    // If iframe height set to auto adjust, register callback to do that when
+    // the contents finish loading.
+    if (autoAdjustHeight) {
+      iframe.once('iframe-auto-height').on('load', function () {
+        Drupal.entityBrowserIFrame.setIframeHeight(iframe[0]);
+        var obsConfig = { childList: true, characterData: true, attributes: true, subtree: true };
+        var iframeObserver = new MutationObserver (mutationHandler);
+        iframeObserver.observe(iframe[0].contentDocument.body, obsConfig);
+        function mutationHandler () {
+          Drupal.entityBrowserIFrame.setIframeHeight(iframe[0]);
+        }
+      });
+    }
+
     $(this).parent().append(throbber).append(iframe).trigger('entityBrowserIFrameAppend');
     $(this).hide();
   };
 
+  /**
+   * Resizes iFrame element based on its contents.
+   *
+   * @param {object} element
+   *   iFrame element.
+   */
+  Drupal.entityBrowserIFrame.setIframeHeight = function (element) {
+    element.style.height = '0px';
+    var document = element.contentDocument,
+      body = document.body,
+      html = document.documentElement,
+      height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
+    element.style.height = height + 'px';
+    // For entity embed dialog we need to trigger a resize event
+    // to adjust the position of the modal.
+    $('.entity-select-dialog').trigger('resize');
+  }
+
 }(jQuery, Drupal, drupalSettings));
diff --git a/src/Plugin/EntityBrowser/Display/IFrame.php b/src/Plugin/EntityBrowser/Display/IFrame.php
index bb0c4d3..0c0ecc7 100644
--- a/src/Plugin/EntityBrowser/Display/IFrame.php
+++ b/src/Plugin/EntityBrowser/Display/IFrame.php
@@ -256,8 +256,9 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
     $form['height'] = [
       '#type' => 'number',
       '#title' => $this->t('Height of the iFrame'),
-      '#min' => 1,
       '#default_value' => $configuration['height'],
+      '#description' => $this->t('Leave blank for iFrame to dynamically adjust height to contents.'),
+      '#min' => 0,
     ];
 
     $form['link_text'] = [
@@ -284,10 +285,6 @@ class IFrame extends DisplayBase implements DisplayRouterInterface {
     if (preg_match($pattern, $form_state->getValue('width')) == 0) {
       $form_state->setError($form['width'], $this->t('Width must be a number greater than 0, or a percentage between 1% and 100%.'));
     }
-
-    if ($form_state->getValue('height') <= 0) {
-      $form_state->setError($form['height'], $this->t('Height must be greater than 0.'));
-    }
   }
 
 }
diff --git a/src/Plugin/EntityBrowser/Display/Modal.php b/src/Plugin/EntityBrowser/Display/Modal.php
index 01562b2..acbc1d1 100644
--- a/src/Plugin/EntityBrowser/Display/Modal.php
+++ b/src/Plugin/EntityBrowser/Display/Modal.php
@@ -171,6 +171,7 @@ class Modal extends IFrame {
       '#title' => $this->t('Height of the modal'),
       '#default_value' => $configuration['height'],
       '#description' => $this->t('Empty value for responsive height.'),
+      '#min' => 0,
     ];
     $form['auto_open']['#description'] = $this->t('Will open Entity browser modal as soon as page is loaded, which might cause unwanted results. Should be used only in very specific cases such as Inline entity form integration. It is also advised not to use Entity browsers with this option enabled more than once per page.');
 
